import Mathlib.Data.List.Sigma
import Mathlib.Data.Fintype.Basic
import Mathlib.Data.Finset.Card
import Chorlean.utils
import Chorlean.Free
import Batteries.Data.Array
import Chorlean.Role
variable [Role]



-- A faceted Unit type can trivially be unfaceted for users since there is only a singular value
instance: Coe ( Unit) Unit where
  coe _ := ()



-- Endpoint class. used to propagate the endpoint through the library

variable [r:Role]
class Endpoint where
  private mk::
  private endpoint: Œ¥

variable [ep_inst: Endpoint]
private abbrev ep: Œ¥ := ep_inst.endpoint
noncomputable abbrev ep' := ep

/--
Type for located variables.
It is defined by a proposition over a Œ¥ Location
and maps a proof of this proposition for the endpoint to a value
-/
def Located (p: Œ¥ -> Prop) (Œ±: Type) := (p ep) -> Œ±
-- Notation for distributed values that depends on a census proposition@÷ç


notation:max a "@" p  => Located p a

-- sounds like it should make sense to me
axiom Knowledge
  {loc: Œ¥}
  {p: Prop}
  (loc_p:(ep = loc) -> p)
  : p


axiom Knowledge2
  {Œ±:Type}
  {gv: Œ±}
  {value:Œ±}
  {loc: Œ¥}
  (loc_knows:(ep = loc) -> gv = value)
  : gv = value



axiom Knwoledge'
  {Œ±:Type}
  {p:Œ¥->Prop}
  (lv: Œ± @ p)
  (value:Œ±)
  (loc: Œ¥)
  (knows: p loc:=by decide)
  (idk: ‚àÄ z: (ep = loc), lv (by revert knows; simp [z]) = value)
  : ‚àÄ z: (p ep), lv (by revert knows; simp [z]) = value

def Faceted Œ± :=  (l:Œ¥) -> Œ± @ (¬∑ = l)

notation:max "üíé" a => Faceted a

class Unwrap (p: Œ¥ -> Prop) where
   un {q: Œ¥ -> Prop}: (Œ± @ q) -> (impl: ‚àÄ x:Œ¥,  p x -> q x := by decide) -> Œ±

-- class to expose faceted values to the user in a controlled environment.
class Unfacet where
   get: Œ¥

instance: Coe (Faceted Unit) Unit where
  coe _ := ()

-- instance {p q:Œ¥ -> Prop} (impl: p x -> q x := by decide) [Unwrap p] : CoeOut (Œ± @ q) Œ± where
--   coe x := Unwrap.un x


/--removes nested layers of `faceted`-/
-- def Faceted.flatten: Faceted (Faceted Œ± ) -> Faceted Œ±
-- | x => x

-- users may create faceted values out of normal ones.
-- through the normal constructor users could obtain the underlying value.
def Faceted.of (v:Œ±): Faceted Œ± := fun _ _ => v

-- Coe instance to implicetely facet types
instance: Coe Œ± (Faceted Œ±)  where
  coe := Faceted.of

-- unfacetting a Faceted Value at a location l.
-- since we only look at this value from a single location it is safe to unfacet it.
def Faceted.lookInto (f: Faceted Œ±) (l: Œ¥):  Œ± @ (¬∑=l) :=
 f l

-- all is a function that maps everything to true - "everywhere"
-- nobody is a function that maps everything to false - "nowhere"
notation:max "all"  => (fun _ => true)
notation:max "nobody"  => (fun _ => false)

-- Coe instance to implicetely unpack Located
instance (p: Œ¥ -> Prop) (cen: p ep): CoeOut (Œ± @ p) Œ± where
  coe x := x cen

-- coerces Located Unit types into Unit
-- lets you omit variable assignement with let in do notation for Unit Choreos
instance: CoeOut (Located o Unit) Unit where
  coe _ := ()

instance: Coe Unit (Located o Unit) where
  coe _ := fun _ => ()



-- creates a distributed value by deciding over a proposition with access to the endpoint
def Located.wrap {p: Œ¥ -> Prop} (v:Œ±) [Decidable (p ep)]: Œ± @ p :=
  fun _x =>
    if h:(p ep) then
      v
    else
      by contradiction

-- unwrapping a located value by a proof of p for the endpoint.
-- function can be omitted but makes the intent more clear in code
abbrev Located.unwrap' {p: Œ¥ -> Prop} (census: p ep): (Located p Œ±) -> Œ±
| gv => gv census

def Located.cast {p p': Œ¥ -> Prop}  (gv:Œ± @ p') (impl: {x:Œ¥}-> (p x -> p' x) := by decide): (Œ± @ p) :=
  fun c => gv (impl c)

def Located.bind {Œ± Œ≤ : Type} [Decidable (p (ep))] (x: Œ± @p) (f: Œ± ‚Üí Œ≤ @p):  Œ≤ @p  :=
  if h:(p ep) then
    let v := x h
    f v
  else
    fun y => by contradiction


def Located.map {p: Œ¥ -> Prop} [Decidable (p ep)] (f: Œ± -> Œ≤) (x: Œ± @ p): Œ≤ @ p :=
 if h:(p ep) then
      let v := x h
      fun _ => f v
    else
      fun y => by contradiction

instance {p: Œ¥ -> Prop} [Decidable (p ep)]: Monad (Located p) where
  pure x := Located.wrap x
  bind := Located.bind
  map := Located.map




def Faceted.map (f: Œ± -> Œ≤) (x: üíéŒ±): üíéŒ≤ := f ((x ep) rfl)

instance: Monad Faceted where
  pure := Faceted.of
  bind x f := f ((x ep) rfl)
  map := Faceted.map





notation:max a "+++" b => Located.combine a b

def Located.owners  {p: Œ¥ -> Prop} [‚àÄ (x:Œ¥), Decidable (p x)]: Located p Œ± -> List Œ¥ :=
  fun _ => (FinEnum.toList Œ¥).filter p


abbrev Located.flatten (v: Located p (Located q Œ±)) : Located (fun x => p x ‚àß q x) Œ±  :=
  fun pq => v (And.left pq) (And.right pq)


abbrev Located.exclusive {loc:Œ¥} (gv: (üíéŒ±) @ (¬∑ =loc)): (Œ± @ (¬∑ =loc)) :=
  fun cen => (gv cen).lookInto loc cen

abbrev Faceted.alone {loc:Œ¥} (lf: (üíéŒ±)) (known_ep: ep = loc): Œ± :=
  lf.lookInto loc known_ep

abbrev Faceted.exclusive {loc:Œ¥} (gv: (üíéŒ±) @ (¬∑ =loc)): (Œ± @ (¬∑ =loc)) :=
  fun cen => (gv cen).alone cen

def Faceted.from  (lvs: (l:Œ¥) -> Œ± @ (¬∑ = l))  : üíéŒ±  :=
  Faceted.of (lvs ep rfl)

-- ToString instance for distributed values with an ToString instance on the value type.
-- prints "Empty" if the value is not present on the machine
instance [ToString Œº] {p: Œ¥ -> Prop} [Decidable (p ep)]: ToString (Œº @ p) where
  toString x :=
    if h:(p ep) then
      let val := x h
      toString val
    else
      "Empty"

abbrev Faceted.unwrap (f:Faceted Œ±) (ep': {l:Œ¥ // ep = l}): Œ± :=
  f.lookInto ep'.val ep'.prop

notation:max  f "üîé" e => Faceted.unwrap f e


def Located.unwrap {p p': Œ¥ -> Prop} (gv:Œ± @ p') (cen: p ep) (impl: ‚àÄ x:Œ¥, p x -> p' x := by decide): Œ± :=
  gv (impl ep cen)

-- Signature for Networked programs.
-- allows for sending and receiving messages.
-- adheres to [Arch] and prohibits self referencing
inductive NetEff: Type ‚Üí Type 1
| send {Œº: Type} [Serialize Œº] : (r:Œ¥) ‚Üí (p:ep ‚â† r) -> (Role.adj ep r p) ‚Üí Œº ‚Üí NetEff Unit
| recv : (s:Œ¥) ‚Üí (p:ep ‚â† s) -> (Role.adj s ep p.symm) ‚Üí  (Œº: Type) ‚Üí [Serialize Œº] ‚Üí NetEff Œº

-- more sockets than necessary but eh
structure Channel (sender receiver: Œ¥) where
  recv_sock: Socket @ (¬∑=receiver)
  send_sock: Socket @ (¬∑=sender)

def init_sending_channel (sender :Œ¥) (addr: Address):  IO (Socket @ (¬∑=sender)) := do
  if h:(ep = sender) then
    let sock ‚Üê addr.connect_to
    return (fun _ => sock)
  else
    return (fun x => by contradiction)

def init_receiving_channel  (receiver: Œ¥) (addr: Address):  IO (Socket @ (¬∑=receiver)) := do
  if h:(ep = receiver) then
    let sock ‚Üê addr.listen_on
    return (Located.wrap sock)
  else
    return (fun x => by contradiction)


-- epp for initializing a channel between two locations and printing dbg info to console
def init_channel' (sender receiver: Œ¥) (r_sock: Socket @ (¬∑ = receiver)) (addr: Address):  IO (Channel sender receiver) := do

  let send_sock ‚Üê init_sending_channel sender addr
  return ‚ü®r_sock, send_sock‚ü©


-- epp for initializing a channel between two locations and printing dbg info to console
def init_channel (sender receiver: Œ¥) (addr: Address):  IO (Channel sender receiver) := do

  if(dbg_print_init_sockets ‚àß sender = ep) then
    IO.println (s!"<- {reprName receiver} <-".dye Color.White Color.Purple)
  if(dbg_print_init_sockets ‚àß receiver = ep) then
    IO.println (s!"-> {reprName sender} ->".dye Color.White Color.Blue)
  let recv_sock ‚Üê init_receiving_channel receiver addr
  let send_sock ‚Üê init_sending_channel sender addr
  return ‚ü®recv_sock, send_sock‚ü©

-- distributed datastructure containing all TCP Sockets
structure Network where
  channels: List (Œ£ (id: Œ¥√óŒ¥), Channel id.1 id.2)
  complete: ‚àÄ (k : Œ¥√óŒ¥), (ne:k.1 ‚â† k.2) ‚Üí (Role.adj k.1 k.2 ne) ‚Üí (channels.dlookup k).isSome

-- helper function to look up channels
def Network.getChannel (net: Network) (k:Œ¥√óŒ¥) (ne: k.1 ‚â† k.2) (adj: Role.adj k.1 k.2 ne) : Channel k.1 k.2 :=
  (net.channels.dlookup k).get (by simp [net.complete, ne, adj])

-- calculates unique addresses for location pairs with ascending port numbers, starting at start_port
def default_adress (k:Œ¥ √ó Œ¥) (start_port: Nat := 2222):  Address :=
  let port: Nat := start_port + (FinEnum.equiv k.1) * (FinEnum.card Œ¥) + (FinEnum.equiv k.2)
  .v4  (.mk 127 0 0 1) port.toUInt16

-- connects all nodes according to the [Arch] instance by TCP.
-- returns a network
def init_network (as:  Œ¥√óŒ¥ -> Address := default_adress)
  [‚àÄ (a b: Œ¥), (ne: a‚â†b) -> Decidable (Role.adj a b ne)]
  : IO Network := do
  let filtered := (FinEnum.toList (Œ¥√óŒ¥)).filter (fun k => k.1 ‚â† k.2 ‚àß ((ne: k.1 ‚â† k.2) -> Role.adj k.1 k.2 ne))

  let progs: List (Œ£ (k: (Œ¥√óŒ¥)), Address)  := filtered.map (fun k => ‚ü®k, as k‚ü© )
  let channels_prog: IO (List (Œ£ (k: Œ¥√óŒ¥), Channel k.1 k.2)):= progs.mapM (fun x => do
    let id := x.1
    let chan: Channel id.1 id.2 ‚Üê  init_channel id.1 id.2 x.2
    return ‚ü®id, chan‚ü© )
  let cs ‚Üê channels_prog

  if(dbg_print_init_sockets) then
    let padding := (FinEnum.max_name_len (Œ±:= Œ¥)) * 2 + 19
    IO.println ((repeat_string "-" padding) ++ "\n")
  return {
            channels := cs
            complete := fun k => by
              simp [List.dlookup_isSome, List.keys]
              intro x y
              sorry -- TODO might be complicated to prove... maybe the function should be stated differently
              done
          }

-- lifts NetEff into IO by sending and receiving messeges over the TCP Sockets of Network
instance NetEPP (net: Network): MonadLiftT NetEff IO where
  monadLift x := match x with
  | NetEff.send r p q m=> do
    let ep := ep
    let ch := net.getChannel ‚ü®ep, r‚ü© p q
    let sock := ch.send_sock (by simp)
    if dbg_print_net_msgs then
      let send_text := s!"<- {reprName r} <-".dyeBack Color.Purple
      IO.println s!"{send_text} {Serialize.pretty m}"
    sock.send_val2 m

  | NetEff.recv s p q Œº => do
    let ep := ep
    let c := net.getChannel ‚ü®s, ep‚ü© (Ne.symm p) q
    let sock := c.recv_sock (by simp)

    let res ‚Üê sock.recv_val2
    if dbg_print_net_msgs then
      let recv_text := s!"-> {reprName s} ->".dyeBack Color.Blue
      IO.println s!"{recv_text} {Serialize.pretty res}"
    return res

-- instance {Œ¥:Type} [S: LocTy Œ¥] {p: Œ¥ ‚Üí Prop}: LocTy (Subtype p (Œ±:=Œ¥)) where
--   sig x := match x with
--     | ‚ü®w, _‚ü© => S.sig w
--   executable x := match x with
--      | ‚ü®w, _‚ü© => S.executable w

-- auxiliary Effect, coproduct of net_eff and local_eff
@[reducible] def LocalProgramEff := NetEff ‚®≥ IO--(Role.sig ep)
--@[reducible] def LocalProgramEff (Œ¥:Type) [sig:LocTy Œ¥] [Endpoint Œ¥]:= (NetEff Œ¥) ‚®≥ IO

-- A Monad for Local Effects where leff is the Effect Signature
@[reducible] def LocalM := Free (LocalProgramEff)





/--
(currently monad because annoying lean rules... maybe mutual with Free would work)
Signature Type for Choreographies.
Choreographies are parameterized by and cenus, proving a proposition of ep
The signature allows to Broadcast values, resulting in a replicated value at every location
Par starts a IO Program that will run at every endpoint resulting in a Faceted Value
-/
inductive Choreo: (p:Œ¥ -> Prop) -> (census: p ep) ->  Type ‚Üí Type 1 where
| Broadcast {Œº:Type} [Serialize Œº]
  {q: Œ¥ -> Prop}
  [‚àÄ x, Decidable (p x)]
  [‚àÄ x, Decidable (q x)]
  (sender: Œ¥)
  (msg: Œº @ q)
  (adj:  ‚àÄ (l':Œ¥), p l' -> ¬¨(q l') -> (ne: sender ‚â† l') -> (Role.adj sender l' ne))
  (ex: p sender)
  (owns: q sender)
  --(next: (Œº @ (fun x => p x ‚à® q x)) -> Choreo p c Œ±)
  (next: {x:Œº // (h:(ep = sender)) -> x = (msg (by simp [owns, h]))} -> Choreo p c Œ±)
  :
  Choreo p c Œ±
| Par
  {c: p ep}
  --(prog: Free (((FinEnum.toList Œ¥).filter p).foldl ) Œ≤)
  (prog: IO Œ≤)
  --(alone: ((FinEnum.toList Œ¥).filter p).length = 1)
  (next: ((r:Œ¥) -> Œ≤ @ (¬∑ = r)) -> Choreo p c Œ±)
  :
  Choreo p c Œ±
| Enclave
  (p': Œ¥ -> Prop) [Decidable (p' ep)]
  (subChor: (c': p' ep) -> Choreo p' c' Œ≤)
  (imp: ‚àÄ (x:Œ¥),  p' x -> p x)
  (next: (Œ≤ @ p') -> Choreo p c Œ±)
  :
  Choreo p c Œ±
| Return
  (v:Œ±):
  Choreo p c Œ±

def Choreo.bind {p: Œ¥ -> Prop} {c: p ep} {Œ± Œ≤ : Type} : Choreo p c Œ± ‚Üí (Œ± ‚Üí Choreo p c Œ≤) ‚Üí Choreo p c Œ≤
| Choreo.Par prog next (Œ±:=Œ±), cont =>
  Choreo.Par prog (fun x => Choreo.bind (next x) cont)

| Choreo.Broadcast v adj ex ex2 next (sender:=loc) (p:=p), cont =>
  Choreo.Broadcast loc v adj ex ex2 (fun x => Choreo.bind (next x) cont)

| Choreo.Enclave p' subChor imp next, cont =>
  Choreo.Enclave p' subChor imp (fun x => Choreo.bind (next x) cont)

-- | Choreo.Gather loc fv adj next, cont =>
--   Choreo.Gather loc fv adj (fun x => Choreo.bind (next x) cont)

| Choreo.Return v, cont =>
  (cont v)

-- annoyingly its own monad and not re-using Free
instance: Monad (Choreo p c) where
  pure := Choreo.Return
  bind := Choreo.bind


-- projects a Chor to a LocalM by adding the neccesarry NetEffects
def Choreo.epp' {p: Œ¥ -> Prop} (c: p ep) {Œ± :Type}: (Choreo p c Œ±) ‚Üí Free (LocalM) Œ±
| Choreo.Par prog next (Œ≤:=Œ≤)  (Œ±:=Œ±) => do
  --have unfacet: Unfacet := ‚ü®fun x => x.lookInto ep rfl‚ü©
  --have unwrap: Unwrap p := ‚ü®fun x y => x y‚ü©
  let res <-prog
  (next (fun _ => Located.wrap res)).epp'

| Choreo.Broadcast v adj ex next (sender:=sender) (Œº:= Œº) (p:=p) (q:=q) (owns := owns) => do

  if h1:(ep = sender) then

    let v := (v (cast (congrArg q (id (Eq.symm h1))) owns))

    for x in (FinEnum.toList Œ¥) do
      if h3: ¬¨(q x) ‚àß (p x) ‚àß (ep ‚â† x) then
        NetEff.send x h3.right.right (by simp [h1]; exact (adj x h3.right.left h3.left
          (by simp [h1.symm, h3.right.right]))) v
    (next ‚ü®v, fun _ => rfl‚ü©).epp'
  else if h2:(q ep) then
    let v := v h2
    (next ‚ü®v, (fun x => False.elim (h1 x))‚ü©).epp'
  else
    let v ‚Üê NetEff.recv sender h1 (adj ep c h2 (fun a => h1 a.symm)) Œº
    (next ‚ü®v, (fun x => False.elim (h1 x))‚ü©).epp'


| Choreo.Enclave p' subChor imp next =>
  if h:(p' ep) then do
    have unwrap: Unwrap p' := ‚ü®fun x y => x (y ep h)‚ü©
    let x := subChor h
    let y <- x.epp'
    (next (fun _ => y)).epp'
  else
    (next (fun _ => by contradiction)).epp'

| Choreo.Return v =>
  return v

-- lifts Choreo into IO
instance EPP
  (p: Œ¥ -> Prop) {c: p ep}
  (net: Network) : MonadLiftT (Choreo p c) IO where
   monadLift x :=
    let _netlift := NetEPP net
    let _ep_io_lift := Role.executable (ep)
    (Choreo.epp' c x)

/--
runs a program, specified by free Monads, in parallel for all roles.
-/
def par
  (cont: [‚àÄ (x:{y:Œ¥ // p y}), MonadLiftT (Free (Role.sig x)) (Free (Role.sig ep))] -> IO Œ±)
  :
  Choreo p c (üíéŒ±)
  :=
  have: ‚àÄ (x:{y:Œ¥ // p y}), MonadLiftT (Free (Role.sig x)) (Free (Role.sig ep)) := sorry
  Choreo.Par cont (fun x => Choreo.Return x)

/--
runs a program, specified by free Monads, in parallel for all roles.
-/
def par2
  (a b: Œ¥)
  {c: (fun x => x = a ‚à® x = b) ep}
  (prog: (Free ((Role.sig a) ‚áπ (Role.sig b)) Œ± ))
  :
  Choreo (fun x => x = a ‚à® x = b) c (üíéŒ±)
  :=
  --Choreo.Par prog (fun x => Choreo.Return x)
  sorry

/--
runs a program, specified by free Monads, in parallel for all roles.
-/
def run
  {p: Œ¥ -> Prop}  [‚àÄ x, Decidable (p x)]
  {c: p ep}
  (cont: IO Œ±)
  (alone: ((FinEnum.toList Œ¥).filter p).length = 1 := by decide)
  :
  Choreo p c Œ±
  := do
  let res <- par cont
  let e := ((FinEnum.toList Œ¥).filter p)[0]

  return res.alone (loc := ((FinEnum.toList Œ¥).filter p)[0]) (by sorry)


/--
broadcasts a value from one location to all other locations
-/
def bcast {Œº:Type} [Serialize Œº] [‚àÄ x, Decidable (p x)]
  [‚àÄ (x:Œ¥), Decidable (q x)]
  (sender: Œ¥)
  (msg: Œº @ q)
  (adj:  ‚àÄ (l':Œ¥), p l' -> ¬¨(q l') -> (ne: sender ‚â† l') -> (Role.adj sender l' ne) := by decide)
  (ex: p sender := by decide)
  (owns: q sender := by decide)
  :
  Choreo p c {x:Œº // (h:(ep = sender)) -> x = (msg (by simp [owns, h]))}
  :=
  Choreo.Broadcast sender msg adj ex owns (fun x => Choreo.Return x)

/--
embedding a choreography containing stricly less roles
-/
def enclave
  (p': Œ¥ -> Prop) [Decidable (p' ep)]
  (subChor: {c': p' ep} -> Choreo p' c' Œ±)
  (imp: ‚àÄ (x:Œ¥),  p' x -> p x := by decide)
  :
  Choreo p c (Œ± @ p')
  :=
  Choreo.Enclave p' (fun _ => subChor) imp (fun x => Choreo.Return x)



-- returns a list of locations that fullfill 2 predicates, such that the locations are adjecent to every other location that fullills p but not q
-- this list consists of every location able to broadcast a value a@q for census p
abbrev possible_caster (p q : Œ¥ -> Prop)
  [‚àÄ x, Decidable (p x)]
  [‚àÄ x, Decidable (q x)]
  : List Œ¥:= ((FinEnum.toList Œ¥).filter
  (fun x => q x ‚àß p x ‚àß  ‚àÄ (l':Œ¥), p l' -> ¬¨(q l') -> (ne: x ‚â† l') -> (Role.adj x l' ne)))


/--
Variant of bcast where the broadcaster is deduced automatically.
-/
def bcast'   {Œº:Type} [Serialize Œº]
  [‚àÄ x, Decidable (p x)]
  [‚àÄ (x:Œ¥), Decidable (q x)]
  (msg: Œº @ q)
  (castable: (possible_caster p q).length > 0 := by decide)
  :
  Choreo p c {x:Œº // (h:(ep = ((possible_caster p q)[0]'castable))) -> x = (msg (by sorry))}
  :=
  Choreo.Broadcast ((possible_caster p q)[0]'castable) msg
  (
    have qq: ((possible_caster p q)[0]'castable) ‚àà (possible_caster p q) := by exact List.getElem_mem (possible_caster p q) 0 castable
    have q := List.of_mem_filter qq
    by revert q; simp only [ne_eq, Bool.decide_and, Bool.and_eq_true, decide_eq_true_eq, and_imp]; exact
      fun _ _ a l' a_1 a_2 ne => a l' a_1 a_2 ne
  )
  (
    have qq: ((possible_caster p q)[0]'castable) ‚àà (possible_caster p q) := by exact List.getElem_mem (possible_caster p q) 0 castable
    have q := List.of_mem_filter qq
    by revert q; simp only [ne_eq, Bool.decide_and, Bool.and_eq_true, decide_eq_true_eq, and_imp]; exact
      fun _ a _ => a
  )
  (
    have qq: ((possible_caster p q)[0]'castable) ‚àà (possible_caster p q) := by exact List.getElem_mem (possible_caster p q) 0 castable
    have q := List.of_mem_filter qq
    by revert q; simp only [ne_eq, Bool.decide_and, Bool.and_eq_true, decide_eq_true_eq, and_imp]; exact
      fun a _ _ => a
  ) (fun x => Choreo.Return x)


/--
embedding a choreography containing stricly less roles
-/
def enclave_bcast {Œº:Type} [Serialize Œº]
  (p': Œ¥ -> Prop) [Decidable (p' ep)]
  [‚àÄ x, Decidable (p x)]
  [‚àÄ (x:Œ¥), Decidable (p' x)]
  (subChor: {c': p' ep} -> Choreo p' c' Œº)
  (imp: ‚àÄ (x:Œ¥),  p' x -> p x := by decide)
  (castable: (possible_caster p p').length > 0 := by decide)
  :
  Choreo p c Œº
  := do
  let temp <- enclave p' subChor imp
  bcast' temp castable



notation:max "„Äê" a "„Äë" b  => enclave ((a)) b
notation:max "„Äê" a "„Äë*" b  => enclave_bcast a b

-- notation:max "„Äê" a "„Äë" b  => enclave (fun x => x ‚àà a) b
-- notation:max "„Äê" a "„Äë*" b  => enclave_bcast (fun x => x ‚àà a) b

-- /--
-- convenience method that enclaves a par at a single location and unfacets the resulting value
-- -/
-- def locally
--   (loc: Œ¥)
--   (subChor: {c': ep = loc} -> Free (Role.sig loc) Œ±)
--   (ex: p loc := by decide)
--   :
--   Choreo p c (Œ± @ (¬∑=loc))
--   := do
--   let res <- enclave (¬∑=loc) (fun {cen} => do
--       let res <- par ( fun x =>
--         let prog: Free (Role.sig x.val) Œ± := cast (by simp [cen, x.prop.symm]) (subChor (c':= cen))
--         prog
--       )
--       return res.lookInto loc
--   ) (
--     have q: ‚àÄ (x:Œ¥), (x = loc) -> p x := by simp only [forall_eq]; exact ex
--     fun x y => q x y)
--   return res.flatten.cast (impl:=fun a => ‚ü®a, a‚ü©)




-- /--
-- convenience method that broadcasts after locally
-- -/
-- def locally_bcast [Serialize Œº] [‚àÄ x, Decidable (p x)]
--   (loc: Œ¥)
--   --(subChor: [Census (@ loc)] -> [Unfacet] -> Free (LocSig.sig loc ) Œº)
--   (subChor: {c' :ep = loc} -> Free (Role.sig loc) Œº)
--   (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: loc ‚â† l') -> (Role.adj loc l' ne) := by decide)
--   (ex: p loc := by decide)
--   :
--   Choreo p c Œº
--   := do
--   let res <- locally loc (fun {cen} => subChor (c' := cen)) ex
--   let res' <-bcast (sender:=loc) res (fun l' a _ ne => adj l' a ne) (ex:=ex) rfl
--   return res'

/--
convenience method that communicates the result of a local program from a sender to a receiver
-/
def com  [Serialize Œº] [‚àÄ x, Decidable (p x)]
  (msg: Œº @ (¬∑ = (sender:Œ¥)))
  (receiver: Œ¥)
  --(subChor: [Census (@ loc)] -> [Unfacet] -> Free (LocSig.sig loc ) Œº)
  (adj:  (ne: sender ‚â† receiver) -> (Role.adj sender receiver ne) := by decide)
  (ex_sender: p sender := by decide)
  (ex_receiver: p receiver := by decide)
  :
  Choreo p c ({x:Œº // (h:(ep = sender)) -> x = msg h} @ fun x => x = sender ‚à® x = receiver)

  := do
  enclave (p' := fun x => x = sender ‚à® x = receiver)
    (imp := by simp only [forall_eq_or_imp, forall_eq]; exact ‚ü®ex_sender, ex_receiver‚ü©) (

    bcast sender msg (by simp; exact fun _ ne => adj ne) (Or.intro_left (sender = receiver) rfl) rfl
  )


-- convenience method that enclaves a locally_bcast for a sender and group of receivers
-- def com'  [Serialize Œº]  [‚àÄ x, Decidable (p x)]
--   (sender: Œ¥)
--   (receivers: Œ¥ -> Prop) [‚àÄ x, Decidable (receivers x)]
--   --(subChor: [Census (@ loc)] -> [Unfacet] -> Free (LocSig.sig loc ) Œº)
--   (subChor: {c' :ep = sender} -> Free (Role.sig sender) Œº)
--   (adj: ‚àÄ (x:Œ¥), receivers x -> (ne: sender ‚â† x) -> (Role.adj sender x ne) := by decide)
--   (ex_sender: p sender := by decide)
--   (ex_receivers: ‚àÄ (x:Œ¥),  receivers x -> p x := by decide)
--   :
--   Choreo p c (Œº @ fun x => x = sender ‚à® receivers x)
--   := do
--   enclave (p' := fun x => x = sender ‚à® receivers x)
--     (imp := by simp only [forall_eq_or_imp, forall_eq]; exact ‚ü®ex_sender, ex_receivers‚ü©) (

--     locally_bcast (loc:=sender)
--       (fun {cen} => subChor (c' := cen))
--       (adj:= by simp only [ne_eq, forall_eq_or_imp, not_true_eq_false, IsEmpty.forall_iff, true_and]; exact fun a a_1 ne => adj a a_1 ne)
--       (ex := by simp)
--   )

/--
-- gathers all values of a faceted value in a single location
-/
def gather'  [Serialize Œº]  {p q: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]  [‚àÄ x, Decidable (q x)]
  (loc: Œ¥)
  (data: (üíéŒº) @ q)
  (ex: p loc := by decide)
  (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: l' ‚â† loc) -> (Role.adj l' loc ne) := by decide)
  :
  Choreo p c (({l // p l ‚àß q l} -> Œº) @ (¬∑ = loc))
  := do

    let filtered := (FinEnum.toList Œ¥).filter (fun x => p x ‚àß q x)

    let temp: List ({l // p l ‚àß q l} √ó (Œº @ (¬∑ = loc))) <- filtered.mapM (fun x => do
      let xx := List.filter_true filtered

      have qq: p x := by sorry
      have qq': q x := by sorry


      let v <- com
        (sender:=x)
        (receiver:=loc)
        (ex_sender := qq)
        (ex_receiver:= ex)
        (adj := fun ne => adj x qq ne)
        (
          fun {cen'} =>
          let temp_res: (üíéŒº) @ (¬∑ = x) := fun {cen} => (data (by simp [cen]; exact qq'))
          let res := Faceted.exclusive temp_res
          Faceted.exclusive temp_res cen'
        )

      return ‚ü®‚ü®x, qq, qq'‚ü©, v.cast (impl := fun a => Or.inr a)‚ü©
    )
    return fun a b => ((temp.lookup b).get (sorry)) a


/--
-- gathers all values of a `Faceted` at a single location
-/
def gather  [Serialize Œº]  {p: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]
  (loc: Œ¥)
  (data: üíéŒº)
  (ex: p loc := by decide)
  (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: l' ‚â† loc) -> (Role.adj l' loc ne) := by decide)
  :
  Choreo p c (({l // p l} -> Œº) @ (¬∑ = loc))
  := do
    let mut vals: List ({l // p l} √ó (Œº @ (¬∑ = loc))) := []
    let filtered := (FinEnum.toList Œ¥).filter p

    let temp: List ({l // p l} √ó (Œº @ (¬∑ = loc))) <- filtered.mapM (fun x => do
      let xx := List.filter_true vals

      --have h : x ‚àà List.filter p (FinEnum.toList Œ¥) := by simp; trivial

      --have h: x ‚àà filtered := by simp [List.filterM]
      --let q := List.of_mem_filter h
      have qq: p x := by sorry
      --let xxx := List.of_mem_filter h
      --have qq: x ‚àà (FinEnum.toList Œ¥).filter p := by refine List.mem_filter_of_mem (by exact FinEnum.mem_toList x) (by simp [List.of_mem_filter]; )


      let v <- com
        (sender:=x)
        (receiver:=loc)
        (ex_sender := qq)
        (ex_receiver:= ex)
        (adj := fun ne => adj x qq ne)
        (fun {cen} => (data.lookInto x cen))

      return ‚ü®‚ü®x, qq‚ü©, v.cast (impl := fun a => Or.inr a)‚ü©

    )

    return fun a b => ((temp.lookup b).get (sorry)) a

/--
gathers all values of a faceted List in a single location by merging all individual lists.
merging defaults to appending lists
-/

def gatherList  [Serialize Œº]  {p: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]
  (loc: Œ¥)
  (data: Faceted (List Œº))
  (merge: List Œº -> List Œº -> List Œº := List.append)
  (ex: p loc := by decide)
  (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: l' ‚â† loc) -> (Role.adj l' loc ne) := by decide)
  :
  Choreo p c ((List Œº) @ (¬∑ = loc))
  := do
  let temp <- gather loc data ex adj

  enclave (¬∑ = loc) (fun {cen} => do
    let mut res: List Œº := []
    for x in (FinEnum.toList Œ¥) do
      if h: p x then
        res := merge res ((temp cen) ‚ü®x, h‚ü©)
    return res
    )
    (by simp; exact ex)



/--
broadcast different values of the same type
-/

def scatter  [Serialize Œº]  {p: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]
  {loc: Œ¥} [Decidable (ep = loc)]
  (data:  ({l // p l} -> Œº) @ (¬∑ = loc))
  (ex: p loc := by decide)
  (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: loc ‚â† l') -> (Role.adj loc l' ne) := by decide)
  :
  Choreo p c (Faceted Œº)
  := do

  let mut lst: List (Œ£ (owner:{l // p l}), (Œº @ (¬∑ = owner.val))) := []

  for x in (FinEnum.toList Œ¥) do
    if h: (p x) then

      let lv <- com (data.map (fun y => y ‚ü®x, h‚ü©)) x (fun ne => adj x h ne) ex h
      lst := lst.concat ‚ü®‚ü®x, h‚ü©, lv.cast (impl := fun {x_1} a => Or.inr a)‚ü©
  let res :=  ((lst.dlookup ‚ü®ep, c‚ü©).get (by sorry)) (by trivial)
  return Faceted.of res



def chunk_size  (l: Œ¥) (data_size: Nat) :=
  let id := FinEnum.equiv l
  let res := data_size % (FinEnum.card Œ¥)
  if id < res then
    res + 1
  else
    res

/--
scatters items of a list evenly across nodes. The first portion of nodes might handle one additional item if there is a rest
-/
def scatterList  [Serialize Œº]  {p: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]
  {loc: Œ¥} [Decidable (ep = loc)]
  (data:  (List Œº) @ (¬∑ = loc)) [Decidable (p loc)]
  (ex: p loc := by decide)
  (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: loc ‚â† l') -> (Role.adj loc l' ne) := by decide)
  :
  Choreo p c (Faceted (List Œº))  := do

  let N := (FinEnum.card {l // p l})
  let data':  ({l // p l} -> List Œº) @ (¬∑ = loc) :=
    fun x y  =>

      let id := FinEnum.equiv y
      let chunk_size := (data x).length / N
      let rest := (data x).length % N
      let chunk_start := (id.val * chunk_size) + (min rest id.val)

      let chunk_size :=
        if id < rest then
          chunk_size + 1
        else
          chunk_size
      (data x).fromTo chunk_start chunk_size

  scatter data' ex adj

-- def par_map  [Serialize Œ±] [Serialize Œ≤]  {p: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]
--   {loc: Œ¥} [Decidable (ep = loc)]
--   (data:  ({l // p l} -> Œ±) @ (¬∑ = loc))
--   (f: Œ± -> Œ≤)
--   (ex: p loc := by decide)
--   (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: loc ‚â† l') -> (Role.adj loc l' ne) ‚àß (Role.adj l' loc ne.symm) := by decide)
--   :
--   Choreo p c (({l // p l} -> Œ≤) @ (¬∑ = loc)) := do

--   let chunks  <- scatter data ex (fun l ex ne => (adj l ex ne).left)
--   gather loc (chunks.map f) ex (fun l ex ne => (adj l ex ne.symm).right)

-- def par_map_list  [Serialize Œ±] [Serialize Œ≤]  {p: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]
--   {loc: Œ¥} [Decidable (ep = loc)]
--   (data:  (List Œ±) @ (¬∑ = loc))
--   (f: Œ± -> Œ≤)
--   (merge: List Œ≤ -> List Œ≤ -> List Œ≤ := List.append)
--   (ex: p loc := by decide)
--   (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: loc ‚â† l') -> (Role.adj loc l' ne) ‚àß (Role.adj l' loc ne.symm) := by decide)
--   :
--   Choreo p c ((List Œ≤) @ (¬∑ = loc)) := do

--   let chunks  <- scatterList data ex (fun l ex ne => (adj l ex ne).left)
--   gatherList loc (chunks.map (fun x => x.map f)) merge ex (fun l ex ne => (adj l ex ne.symm).right)

-- def par_mapM  [Serialize Œ±] [Serialize Œ≤]  {p: Œ¥ -> Prop} {c: p ep} [‚àÄ x, Decidable (p x)]
--   {loc: Œ¥} [Decidable (ep = loc)]
--   (data:  ({l // p l} -> Œ±) @ (¬∑ = loc))
--   (f: Œ± ->  Free (Role.sig ep) Œ≤)
--   (ex: p loc := by decide)
--   (adj:  ‚àÄ (l':Œ¥), p l' -> (ne: loc ‚â† l') -> (Role.adj loc l' ne) ‚àß (Role.adj l' loc ne.symm) := by decide)
--   :
--   Choreo p c (({l // p l} -> Œ≤) @ (¬∑ = loc)) := do

--   let chunks  <- scatter data ex (fun l ex ne => (adj l ex ne).left)
--   let res <- par (fun eep => f (chunksüîéeep ))
--   gather loc res ex (fun l ex ne => (adj l ex ne.symm).right)


-- maps strings to values of Œ¥.
-- this works by Repr wich uses the actual declaration names of a type
private def endpointFromString (s: String): IO (Endpoint) :=
  let ep_opt: Option Œ¥ := FinEnum.ofString? s

  if h: (ep_opt.isSome) then
    let ep := ep_opt.get h
    return ‚ü®ep‚ü©
  else
    throw (IO.userError s!"{s} is no valid endpoint")

/--
class for a well defined entry point into the library
-/
class ChorMain where
  /--
  choreographic main function. The List of strings corresponds to command line input per node, starting after the endpoint argument.
  The main function starts by including every Role.
  -/
  main: [Endpoint] -> Faceted (List String) -> Choreo all rfl (Faceted UInt32)

/--
Main Entry point. users shall call this by:
main := CHOR_ENTRYPOINT
-/
def CHOR_ENTRYPOINT
  [cm: ChorMain ]
  (args: List String)
  : IO UInt32 := do
  if h:(args.length >= 1) then
    let mode := args[0]'(h)
    let _ep: Endpoint <- endpointFromString mode
    IO.clearTerminal

    if dbg_print_EP then
      IO.println (
        "-> recv ->".dyeBack Color.Blue
        ++ "<- send <-".dyeBack Color.Purple
        ++ "\n"
      )
      IO.println s!"{"init network".dyeFont Color.Yellow}"
      IO.println (s!"<<<{reprName ep}>>>".dye Color.Black Color.White)

    let net <- init_network

    IO.println s!"{"start choreo".dyeFont Color.Yellow}"
    IO.println ((s!"<<<{reprName ep}>>>".dye Color.Black Color.White) ++ "\n")
    let _nepp := NetEPP net
    let _epp := EPP (p:= fun _ => true) net

    let cmain: Choreo all rfl (ep_inst := _ep)  (Faceted UInt32) := cm.main (Faceted.of (args.drop 1))
    --let cmain: Choreo all rfl (ep_inst := _ep)  (Faceted UInt32) := sorry

    let res <- cmain
    IO.println s!"EXIT_CODE: {res.lookInto ep rfl}"
    return res.lookInto ep rfl
  else
    throw (IO.userError s!"no endpoint argument\nenter endpoint as first argument")
